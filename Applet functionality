[PV204] Security Technologies
KeePassNFC applet
3. Security Analysis

KeePassNFC applet functionality
KeePass is an open source password manager that aims to store passwords securely, enabling the user to keep all its sensitive password in KeePass encrypted database, which can be locked by a single Master Password (MP). Hence, the user is required to remember only that single password/key to unlock the database to retrieve his passwords and edit them.
KeePassNFC is a JavaCard applet which enables the user to protect the master key of his KeePass database. It was based on the project smartcard_crypto_applet and can be run on JavaCard platform with JCRE version 2.2.x or above.
Specific functionality offered
The main functionality offered is to locally save the MP of the database, and then decrypt the database internally to the card.
Every communication is encrypted with the public key of an internal-only 2048b-RSA key, and each transaction is encrypted with one more temporary key provided by the user.
Instructions and APDU formats
The applet offers 7 specific instructions:
[0x76] - Write To Scratch: this is the main communication method, since other commands relies on this method was previously called, with no checks. The format expected is to have the first two bytes indicating the offset at which the data to write starts, and from that offset the data will be copied until the end of the APDU buffer. The scratch area is a 260-bytes memory area allocated on RAM. No checks are done at all for emptiness, wrong offset value… The output APDU contains a success value (0x1) if everything went fine, otherwise a JavaCard exception will be raised.
[0x75] - Generate Card Key: this method doesn’t expect any input, and if called it will reset the internal key, setting a flag indicating that the cipher isn’t initialized. The output APDU contains three bytes indicating (1) the success of the operation and (2-3) the length of the internal key.
[0x70] - Get Card Public Key: this method will return the exponent or the modulus of the public key for the internal(card) key. As input APDU, it expects one byte indicating whether to return the exponent or the modulus, and two bytes indicating from which byte it should return the modulus (0x0000 otherwise). The response contains
1 byte: success/failure. Failure currently occurs only if the first byte of the request isn’t recognized.
2 bytes: length of exponent (in case of exponent)/number of data bytes sent this time (in case of modulus).
2 bytes: whether there are more bytes to send (how many of them).
n bytes: the actual exponent/modulus bytes.
[0x71] - Set Password Key: the password key must be sent to the card encrypted with the card public key by the user. Hence, firstly this method expects the user to have already sent a Write To Scratch APDU with the encrypted password key. Now, this method will decrypt the scratch area to obtain password key (AES-128). No input is required, and the output contains one byte, always corresponding to the success value (0x1). If any problem occurs, the corresponding Java standard exception will be raised.
[0x72] - Prepare Decryption: this method expects the user to have previously sent a Write To Scratch APDU with a transaction key (AES-128) encrypted with the public key of the card. This method will load this key into an internal variable (RAM), and it will initialize the ciphers for the transaction and for the password decryptions. The output APDU contains just the success/failure byte. The failure is set if the length of the incoming buffer data is not 32. Those bytes are the two IV components for the ciphers, in order: 16 bytes for the transaction cipher; 16 bytes for the password cipher. Both IVs are in plaintext and without MAC integrity.
[0x73] - Decrypt Block: after sending a correct Prepare Decryption APDU, the user can send the database to be decrypted in blocks. The blocks are decrypted by the password cipher into the scratch area, and then that is encrypted using the transaction cipher and sent back to the user as output. The P1 byte is used to signal if the block is the last one to be decrypted. If both the decryption and encryption succeeded, the first byte of the output is set to 0x1, otherwise to 0x2.
[0x74] - Get Version: this method returns the version of the applet (currently 0x1).





